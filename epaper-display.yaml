esp32:
  board: seeed_xiao_esp32c3
  variant: esp32c3
  framework:
    type: arduino

esphome:
  name: epaper-display
  on_boot:
    - priority: 800
      then:
        - delay: 5s
        - light.turn_on:
            id: led
        - component.update: epaperdisplay
    - priority: -10
      then:
        - delay: 20s
        - globals.set:
            id: is_sensor_ready
            value: "true"
        - light.turn_on:
            id: led
            effect:  "Air Quality Effect"
        - delay: 10s
        - component.update: epaperdisplay

globals:
   - id: is_sensor_ready
     type: bool
     initial_value: "false"

wifi:
  ssid: "YOUR_SSID_HERE"
  password: "YOUR_PASSWORD_HERE"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Epaper-Display Fallback Hotspot"
    password: "12345678"

captive_portal:


# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  - platform: esphome
    password: "123456"

web_server:
  port: 80

font:

  - file: 'fonts/Roboto-Medium.ttf'
    id: roboto_med_30
    size: 30
  - file: 'fonts/Roboto-Regular.ttf'
    id: footer_font
    size: 15
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/','º','µ','³']

  - file: 'fonts/Roboto-Regular.ttf'
    id: main_sensor_unit
    size: 20
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/','º','µ','³']
       
  - file: 'fonts/Roboto-Medium.ttf'
    id: sub_sensor_font
    size: 30
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/','º','µ','³']

  - file: 'fonts/Roboto-Medium.ttf'
    id: location_title
    size: 21
  
  - file: 'fonts/Roboto-Bold.ttf'
    id: main_sensor_font
    size: 80
  
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id:  mdi_small
    size: 31
    glyphs: [
      # Wifi
      '󰤫', # mdi-wifi-strength-alert-outline
      '󰤟', # mdi-wifi-strength-1
      '󰤢', # mdi-wifi-strength-2
      '󰤥', # mdi-wifi-strength-3
      '󰤨', # mdi-wifi-strength-4
      '󰔏', # mdi-themometer
      '󰖎' # mdi-water-percent
      ]

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id:  mdi_wifi
    size: 20
    glyphs: [
      # Wifi
      '󰤫', # mdi-wifi-strength-alert-outline
      '󰤟', # mdi-wifi-strength-1
      '󰤢', # mdi-wifi-strength-2
      '󰤥', # mdi-wifi-strength-3
      '󰤨',  # mdi-wifi-strength-4
      '󰁹' #mdi-battery
      ]

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id:  mdi_med
    size: 33
    glyphs: [
      # Wifi
      '󰤫', # mdi-wifi-strength-alert-outline
      '󰤟', # mdi-wifi-strength-1
      '󰤢', # mdi-wifi-strength-2
      '󰤥', # mdi-wifi-strength-3
      '󰤨', # mdi-wifi-strength-4
      '󰀦' # mdi-alert
      ]
time:
  - platform: homeassistant
    id: homeassistant_time

#Please edit your homeassistant sensors enitity id to match yours
sensor:
  - platform: homeassistant
    entity_id: sensor.ikea_vindstyrka_dining_room_pm25
    id: pm25_indoor

  - platform: homeassistant
    entity_id: sensor.ikea_vindstyrka_dining_room_temperature
    id: temp_indoor
  
  - platform: homeassistant
    entity_id: sensor.ikea_vindstyrka_dining_room_humidity
    id: humid_indoor
  
  - platform: homeassistant
    entity_id: sensor.temperature
    id: temp_outdoor
  
  - platform: homeassistant
    entity_id: sensor.humidity
    id: humid_outdoor

  - platform: homeassistant
    entity_id: sensor.pm2_5
    id: pm25_outdoor

  - platform: homeassistant
    entity_id: sensor.weather_station_battery_soc
    id: sta_batt

  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    id: wifisignal
    update_interval: 60s
    

spi:
  clk_pin: GPIO8
  mosi_pin: GPIO10  #DIN

light:
  - platform: neopixelbus
    type: GRB
    variant: WS2812
    pin: GPIO20
    num_leds: 6
    name: "LED Light"
    id: led
    effects:
      - lambda:
            name: Air Quality Effect
            update_interval: 5s
            lambda: |-
              auto call = id(led).turn_on();
              call.set_transition_length(2000);
              int outdoor_pm25 = int(id(pm25_outdoor).state);

              if (outdoor_pm25 < 18){
                call.set_brightness(0.2);
                call.set_rgb(0.0, 1.0, 0.9);
                call.perform();
                return; 
              }else if (outdoor_pm25 < 38){
                call.set_brightness(0.2);
                call.set_rgb(0.0, 1.0, 0.0);
                call.perform();
                return;
              }else if (outdoor_pm25 < 50){
                call.set_brightness(0.45);
                call.set_rgb(1.0, 0.65, 0.0);
                call.perform();
                return;
              }else{
                call.set_brightness(0.7);
                call.set_rgb(1.0, 0.0, 0.0);
                call.perform();
                return;
              }
display:
  - platform: waveshare_epaper
    id: epaperdisplay
    cs_pin: GPIO3
    dc_pin: GPIO4
    update_interval: 600s
    # update_interval: 15s
    busy_pin: GPIO2
    reset_pin: GPIO21
    model: 4.20in
    lambda: |-

      ESP_LOGI("E-Paper Lambda", "Update display");

      if (!id(is_sensor_ready)){
          it.printf(50, 100, id(main_sensor_font), "Booting..");
          return;
      } 


      int pm25_danger_thres = 38;
    
      float outdoor_temp = id(temp_outdoor).state;
      int outdoor_humid = int(id(humid_outdoor).state);
      int outdoor_pm25 = int(id(pm25_outdoor).state);
      float indoor_temp = id(temp_indoor).state;
      int indoor_humid = int(id(humid_indoor).state);
      int indoor_pm25 = int(id(pm25_indoor).state);

  

      /* OUTSIDE */
      it.print(10, 10, id(location_title), "OUTSIDE");
      it.filled_rectangle(105, 21, 285, 3);
      it.print(10, 114, id(main_sensor_unit), TextAlign::BASELINE_LEFT, "PM2.5");
      it.print(375, 75,  id(mdi_small), TextAlign::BASELINE_CENTER, "󰔏"); //thermometer
      it.print(375, 115, id(mdi_small), TextAlign::BASELINE_CENTER, "󰖎"); //water-percent

      if(outdoor_temp > -100 && outdoor_temp < 100){
        it.printf(357, 75, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , "%2.1fºc",outdoor_temp);
      }else{
        it.print(357, 75, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , " - ºc");
      }

      if(outdoor_humid >=0 && outdoor_humid <= 100){
        it.printf(357, 115, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , "%3d%%", outdoor_humid);
      }else{
        it.print(357, 115, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , " -  %");
      }



      if(outdoor_pm25 < 255 && outdoor_pm25 >=0){    //Has valid value
        if (outdoor_pm25 > 99){
          it.printf(205, 114, id(main_sensor_font), TextAlign::BASELINE_RIGHT , "%3d", outdoor_pm25);
          it.print(210, 114, id(main_sensor_unit),TextAlign::BASELINE_LEFT, "µg/m³");
        }else{
          it.printf(175, 114, id(main_sensor_font), TextAlign::BASELINE_RIGHT , "%2d", outdoor_pm25);
          it.print(180, 114, id(main_sensor_unit),TextAlign::BASELINE_LEFT, "µg/m³");
        }

        if(outdoor_pm25 >= pm25_danger_thres){
          it.print(37, 87, id(mdi_med), TextAlign::BASELINE_CENTER, "󰀦"); //warning
        }
      }
      else{                             //Invalid or error value
        it.print(175, 114, id(main_sensor_font), TextAlign::BASELINE_RIGHT , "- ");
        it.print(180, 114, id(main_sensor_unit),TextAlign::BASELINE_LEFT, "µg/m³");
      }

      /* INSIDE */

      int offsetY = 137;
      it.print(10, 10 + offsetY, id(location_title), "INSIDE");
      it.filled_rectangle(85, 21 + offsetY, 305, 3);
      it.print(10, 114 + offsetY, id(main_sensor_unit), TextAlign::BASELINE_LEFT, "PM2.5");
      it.print(375, 75 + offsetY,  id(mdi_small), TextAlign::BASELINE_CENTER, "󰔏"); //thermometer
      it.print(375, 115 + offsetY, id(mdi_small), TextAlign::BASELINE_CENTER, "󰖎"); //water-percent

      if(indoor_temp > -100 && indoor_temp < 100){
        it.printf(357, 75 + offsetY, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , "%2.1fºc", indoor_temp);
      }else{
        it.print(357, 75 + offsetY, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , " - ºc");
      }

      if(indoor_humid >=0 && indoor_humid <= 100){
        it.printf(357, 115 + offsetY, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , "%3d%%", indoor_humid);
      }else{
        it.print(357, 115 + offsetY, id(sub_sensor_font), TextAlign::BASELINE_RIGHT , " -  %");
      }


      if(indoor_pm25 < 255 && indoor_pm25 >=0){
        if (indoor_pm25 > 99){
          it.printf(205, 114 + offsetY, id(main_sensor_font), TextAlign::BASELINE_RIGHT , "%3d", indoor_pm25);
          it.print(210, 114 + offsetY, id(main_sensor_unit),TextAlign::BASELINE_LEFT, "µg/m³");
        }else{
          it.printf(175, 114 + offsetY, id(main_sensor_font), TextAlign::BASELINE_RIGHT , "%2d", indoor_pm25);
          it.print(180, 114 + offsetY, id(main_sensor_unit),TextAlign::BASELINE_LEFT, "µg/m³");
        }

        if(indoor_pm25 >= pm25_danger_thres){
          it.print(37, 87 + offsetY, id(mdi_med), TextAlign::BASELINE_CENTER, "󰀦"); //warning
        }

      }
      else{
        it.print(175, 114 + offsetY, id(main_sensor_font), TextAlign::BASELINE_RIGHT , "- ");
        it.print(180, 114 + offsetY, id(main_sensor_unit),TextAlign::BASELINE_LEFT, "µg/m³");
      } 

      
      /* FOOTER */
      it.print(10, 298 , id(mdi_wifi), TextAlign::BASELINE_LEFT , "󰁹");
      it.printf(30, 298 , id(footer_font), TextAlign::BASELINE_LEFT , "%3d%%",int(id(sta_batt).state));
      it.strftime(355, 295 , id(footer_font), TextAlign::BASELINE_RIGHT , "%d/%b/%Y %H:%M", id(homeassistant_time).now());
      
      /* WiFi Signal Strenght */
      if(id(wifisignal).has_state()) {
        int x = 375;
        int y = 295;
        if (id(wifisignal).state >= -50) {
            //Excellent
            it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "󰤨");
            ESP_LOGI("WiFi", "Exellent");
        } else if (id(wifisignal).state  >= -60) {
            //Good
            it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "󰤥");
            ESP_LOGI("WiFi", "Good");
        } else if (id(wifisignal).state  >= -75) {
            //Fair
            it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "󰤢");
            ESP_LOGI("WiFi", "Fair");
        } else if (id(wifisignal).state  >= -100) {
            //Weak
            it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "󰤟");
            ESP_LOGI("WiFi", "Weak");
        } else {
            //Unlikely working signal
            it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "󰤫");
            ESP_LOGI("WiFi", "Unlikely");
        }
      }


